using System;

class Player {
    public int PE;
    public int stamina;

    public Player(int pe, int stamina) {
        PE = pe;
        this.stamina = stamina;
    }
}

class Team {
    public string name;
    public Player[] players;

    public Team(string name, Player[] players) {
        this.name = name;
        this.players = players;
    }

    public int GetLPE() {
        int lpe = 0;
        foreach (Player player in players) {
            lpe += player.PE;
        }
        return lpe;
    }

    public void ApplyStaminaLoss(bool isOnAttack) {
        int staminaLossPerMinute = isOnAttack ? 3 : 1; // higher stamina loss when on Attack strategy
        foreach (Player player in players) {
            player.stamina -= staminaLossPerMinute;
        }
    }
}

class Match {
    public Team homeTeam;
    public Team awayTeam;
    public int homeScore;
    public int awayScore;
    public int timeLeft;
    public bool homeHasPossession;

    public Match(Team homeTeam, Team awayTeam, int timeLeft) {
        this.homeTeam = homeTeam;
        this.awayTeam = awayTeam;
        this.timeLeft = timeLeft;
        this.homeHasPossession = true;
    }

    public void Play() {
        while (timeLeft > 0) {
            homeTeam.ApplyStaminaLoss(homeHasPossession);
            awayTeam.ApplyStaminaLoss(!homeHasPossession);

            if (homeHasPossession) {
                if (RollDice(0.8)) { // 80% chance of shooting
                    if (RollDice(GetShotAccuracyRatio(homeTeam, awayTeam))) { // shot accuracy depends on LPE ratio
                        Console.WriteLine($"{homeTeam.name} scores!");
                        homeScore += 1;
                        homeHasPossession = false;
                    } else {
                        Console.WriteLine($"{homeTeam.name} misses the shot.");
                    }
                } else {
                    Console.WriteLine($"{homeTeam.name} loses possession.");
                    homeHasPossession = false;
                }
            } else {
                if (RollDice(0.8)) {
                    if (RollDice(GetShotAccuracyRatio(awayTeam, homeTeam))) {
                        Console.WriteLine($"{awayTeam.name} scores!");
                        awayScore += 1;
                        homeHasPossession = true;
                    } else {
                        Console.WriteLine($"{awayTeam.name} misses the shot.");
                    }
                } else {
                    Console.WriteLine($"{awayTeam.name} loses possession.");
                    homeHasPossession = true;
                }
            }

            timeLeft -= 1;
        }
    }

    public double GetShotAccuracyRatio(Team shootingTeam, Team defendingTeam) {
        double lpeRatio = (double)shootingTeam.GetLPE() / defendingTeam.GetLPE();
        return 0.1 + 0.4 * lpeRatio;
    }

    public bool RollDice(double probability) {
        return new Random().NextDouble() < probability;
    }
}

class Program {
    static void Main() {
        // define teams and players
        Player[] homePlayers = {
            new Player(10, 100),
            new Player(10, 100),
            new Player(20, 100),
            new Player(20, 100),
            new Player(30, 100),
        };
        Team homeTeam = new Team("Home", homePlayers);

        Player[] awayPlayers = {
            new Player(5, 100),
            new Player(5, 100),
            new Player(10, 100),
	    new Player(15, 100),
            new Player(20, 100),
        };
        Team awayTeam = new Team("Away", awayPlayers);

        // start match
        Match match = new Match(homeTeam, awayTeam, 90);
        match.Play();

        // print final score
        Console.WriteLine($"{homeTeam.name} {match.homeScore} - {match.awayScore} {awayTeam.name}");
    }
}


/////////////////
In this implementation, there is a 1 in 10 chance that a penalty occurs each minute. If a penalty occurs, a player from the team with possession is randomly chosen to be sent off for 2 minutes. The player's LPE is temporarily removed from their team's total, and the team plays with one less player for the duration of the penalty.

During the penalty, the `PlayMinute` method is still called for each minute, but the penalized player's `isPenalized` property is set to `true`, which prevents them from participating in the game until the penalty time has expired. After the penalty time has elapsed, the player is allowed to return to the ice, and their LPE is added back to their team's total.

Note that the implementation of penalties is just one way to handle them, and there are many other ways you could design the game to include them.